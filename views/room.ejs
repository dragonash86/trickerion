<% include include/header.ejs %>
<a href="/" class="btn_main">메인</a>
<div class="container room">
<% if (room.start === "대기") { %>
	<h2>생성 시간 : <%= room.name %></h2>
	<ul class="room_info">
		<li>방장 : <%= room.admin %></li>
		<li>참여인원 : <%= room.member.length %>/<%= room.maxMember %></li>
		<li>참가자 :
			<% for (i = 0; i < room.member.length; i++) { %>
				<%= room.member[i] + " " %>
			<% } %>
		</li>
		<li>상태 : <%= room.start %></li>
	</ul>
	<%
		if (user) {
		    var count = 0;
		    for (i = 0; i < room.member.length; i++) {
		        if (room.member[i] === user.user_nick) {
		            count = count + 1;
		        }
		    }
		}
   	%>
	<% if (room.member.length !== room.maxMember && count === 0) { %>
	<!-- <form action="/joinRoom?roomId=<%= room._id %>" method="post"><input type="submit" value="참가하기" /></form> -->
	<% } else if (count !== 0 && room.admin !== user.user_nick) { %>
	<form action="/leaveRoom?roomId=<%= room._id %>" method="post"><input type="submit" value="나가기" /></form>
	<% } if (room.admin === user.user_nick && room.member.length > 1 && room.start !== "진행 중") { %>
	<form action="/startRoom?roomId=<%= room._id %>" method="post"><input type="submit" value="시작" /></form>
	<% } if (room.admin === user.user_nick && room.member.length === 1 && room.start !== "진행 중") { %>
	<form action="/startRoom?roomId=<%= room._id %>" method="post"><input type="submit" value="싱글플레이" /></form>
	<% } if (room.admin === user.user_nick && room.start !== "진행 중") { %>
	<form action="/deleteRoom?roomId=<%= room._id %>" method="post"><input type="submit" value="나가기" /></form>
	<% } %>
<% } else if (room.select_board === "아직") { %>
	<% for (var i = 0; i < room.player.length; i++) { %>
		<% 
			var count = 0;
			var yet = 0;
	    	if (room.player[i].board !== "아직") {
	    		count = count + 1;
	        	yet = room.member.length - count;
	        }
		%>
		<% if (room.player[i].nick === user.user_nick) { %>
            <% if (room.player[i].board === "아직") { %>
				<div class="select_board">
					<h3>판떼기 고르기</h3>
					<ul>
						<% for (i = 0; i < room.board.length; i++) { %>
						<li class="<%= room.board[i] %>"><a href="#n"><p>Type 
						<strong>
						<% if (i === 0 || i === 5) { %>
							A
						<% } else if (i === 1 || i === 6) { %>
							B
						<% } else if (i === 2 || i === 7) { %>
							C
						<% } else if (i === 3 || i === 8) { %>
							D
						<% } else if (i === 4 || i === 9) { %>
							E
						<% } %>
						</strong>
						<span>
						<% if (i < 5) { %>
							Classic
						<% } else if (i > 4) { %>
							Expert
						<% } %>
						</span></p><img src="/images/<%= room.board[i] %>.jpg" alt="<%= room.board[i] %>" /></a></li>
						<% } %>
						<li class="random_1"><a href="#n"><p>Classic Random (+2 Score)</p><img src="/images/board_random.jpg" alt="?" /></a></li>
						<li class="random_2"><a href="#n"><p>All Random(+3 Score)</p><img src="/images/board_random.jpg" alt="?" /></a></li>
						<li class="random_3"><a href="#n"><p>Expert Random(+4 Score)</p><img src="/images/board_random.jpg" alt="?" /></a></li>
					</ul>
					<form action="/selectBoard?roomId=<%= room._id %>" method="post" class="layer_start"><input type="submit" value="시작" /></form>
				</div>
			<% } else { %>
				<p class="t_c p_t_20">아직 <%= yet %>명이 판떼기를 안골랐습니다.</p>
				<a href="" class="btn">새로고침</a>
			<% } %> 
		<% } %>
	<% } %>
<% } else { %>
	<% for (var k = 0; k < room.member.length; k++) { %>
	<% if (room.member[k] === user.user_nick) { %>
		<div class="status">
			<% for (i = 0; i < room.player.length; i++) { %>
				<div class="box">
					<h3 class="player<%= i %>"><%= room.player[i].nick %></h3>
					<ul>
						<li>
							점수 : <%= room.player[i].score %>
							<% if (room.player[i].bonus > 0) { %>
							(+<%= room.player[i].bonus %>)
							<% } %>
						</li>
					</ul>
				</div>
			<% } %>
			<% if (room.round !== 11) { %>
			<ul>
				<li>라운드 : <%= room.round %><li>
			</ul>
			<% } else { %>
			<p class="rank">게임 종료</p>
			<% } %>
		</div>
		
		<div class="board">
			<div class="wrap_tile">
				<ul>
					<% for (var m = 0; m < room.player[k].tile_white; m++) { %>
					<li><img src="/images/tile_white.jpg" class="drag tile rotate_3" alt="tile_white" /></li>
					<% } %>
					<% for (var o = 0; o < room.player[k].tile_energy_blue; o++) { %>
					<li><img src="/images/tile_energy_blue.jpg" class="drag tile rotate_0" alt="tile_energy_blue" /></li>
					<% } %>
					<% for (var p = 0; p < room.player[k].tile_energy_green; p++) { %>
					<li><img src="/images/tile_energy_green.jpg" class="drag tile rotate_0" alt="tile_energy_green" /></li>
					<% } %>
					<% for (var q = 0; q < room.player[k].tile_energy_orange; q++) { %>
					<li><img src="/images/tile_energy_orange.jpg" class="drag tile rotate_0" alt="tile_energy_orange" /></li>
					<% } %>
					<% for (var r = 0; r < room.player[k].tile_energy_red; r++) { %>
					<li><img src="/images/tile_energy_red.jpg" class="drag tile rotate_0" alt="tile_energy_red" /></li>
					<% } %>
					<% for (var s = 0; s < room.player[k].tile_option; s++) { %>
					<li><img src="/images/tile_option.jpg" class="drag tile_engine rotate_0" alt="tile_option" /></li>
					<% } %>
					<li>
						<% for (var t = 0; t < room.tile_black; t++) { %>
						<img src="/images/tile_black.jpg" class="drag tile tile_black rotate_3" alt="tile_black" />
						<% } %>
					</li>
					<li>
						<% for (var u = 0; u < room.tile_way_1; u++) { %>
						<img src="/images/tile_way_1.jpg" class="drag tile tile_way_1 rotate_0" alt="tile_way_1" />
						<% } %>
					</li>
					<li>
						<% for (var v = 0; v < room.tile_way_2; v++) { %>
						<img src="/images/tile_way_2.jpg" class="drag tile tile_way_2 rotate_0" alt="tile_way_2" />
						<% } %>
					</li>
					<li>
						<% for (var w = 0; w < room.tile_way_3; w++) { %>
						<img src="/images/tile_way_3.jpg" class="drag tile tile_way_3 rotate_0" alt="tile_way_3" />
						<% } %>
					</li>
					<li>
						<% for (var x = 0; x < room.tile_way_4; x++) { %>
						<img src="/images/tile_way_4.jpg" class="drag tile tile_way_4 rotate_0" alt="tile_way_4" />
						<% } %>
					</li>
					<li>
						<% for (var y = 0; y < room.tile_way_5; y++) { %>
						<img src="/images/tile_way_5.jpg" class="drag tile tile_way_5 rotate_0" alt="tile_way_5" />
						<% } %>
					</li>
					<li>
						<% for (var z = 0; z < room.tile_way_6; z++) { %>
						<img src="/images/tile_way_6.jpg" class="drag tile tile_way_6 rotate_0" alt="tile_way_6" />
						<% } %>
					</li>
					<% if (room.player[k].select_engine !== "아직") { %>
					<li><img src="/images/<%= room.player[k].tile_engine[room.round - 1].name %>.jpg" class="drag tile_engine selected_engine rotate_0" alt="<%= room.player[k].tile_engine[room.round - 1].name %>" /></li>
					<% } %>
					<% if (room.round > 1) { %>
						<% for (var t = 0; t < room.player[k].round[room.round - 2].length; t++) { %>
						<li><img src="/images/<%= room.player[k].round[room.round - 2][t].name %>.jpg" class="drag tile saved pos_<%= room.player[k].round[room.round - 2][t].row %>_<%= room.player[k].round[room.round - 2][t].col %> rotate_<%= room.player[k].round[room.round - 2][t].rotate %>" id="<%= room.player[k].round[room.round - 2][t].row %>_<%= room.player[k].round[room.round - 2][t].col %>" alt="<%= room.player[k].round[room.round - 2][t].name %>" /></li>
						<% } %>
					<% } %>
				</ul>
			</div>
			<h3>
				<%= room.member[k] %>
				<% var board = room.player[k].board.replace('board_', 'Type ').replace('_', ' ').toUpperCase(); %>
				(<%= board %>)
				<span></span>
			</h3>
		
			<table class="mine <%= room.player[k].board %>">
				<% for (var i = 1; i <= 10; i++) { %>
				<tr>
					<% for (var j = 1; j <= 10; j++) { %>
					<td id="td_<%= i %>_<%= j %>">
						<span><%= i %>-<%= j %></span>
					</td>
					<% } %>
				</tr>
				<% } %>
			</table>
			<% } %>
		<% } %>
		<% for (var i = 0; i < room.member.length; i++) { %>
			<% if (room.member[i] === user.user_nick) { %>
				<% if (room.player[i].select_engine !== "아직") { %>
				<form method="post"><input type="submit" value="배치완료" class="btn complete" /></form>
				<form method="post"><input type="submit" value="포기하기" class="btn give_up" /></form>
				<a href="/room?roomId=<%= room._id %>" class="btn">초기화</a>
				<% } %>
			<% } %>
		<% } %>
		<% for (var i = 0; i < room.member.length; i++) { %>
			<% if (room.member[i] === user.user_nick) { %>
				<% if (room.player[i].select_engine === "아직" && room.round !== 11) { %>		
				<span class="mask"></span>
				<div class="select_engine">
					<h3>라운드 : <%= room.round %></h3>
					<ul>
					<% for (var k = 0; k < room.member.length; k++) { %>
						<li>
							<a href="#n"><img src="/images/<%= room.player[k].tile_engine[room.round - 1].name %>.jpg" id="<% if (room.player[k].tile_engine[room.round -1].bonus !== "") %><%= room.player[k].tile_engine[room.round -1].bonus %>" alt="<%= room.player[k].tile_engine[room.round - 1].name %>" /></a>
							<form method="post" class="layer_start"><input type="submit" value="선택" /></form>
						</li>
					<% } %>
					</ul>
				</div>
				<% } %>
			<% } %>
		<% } %>
	</div>
	<% if (room.player.length > 1) { %>
		<% for (i = 1; i <= room.member.length; i++) { %>
		    <div class="board">
	    		<h3>
					<%= room.member[i] %>
					<% var board = room.player[i].board.replace('board_', 'Type ').replace('_', ' ').toUpperCase(); %>
					(<%= board %>)
				</h3>
				<table class="mine <%= room.player[i].board %>">
					<% for (var i = 1; i <= 10; i++) { %>
					<tr>
						<% for (var j = 1; j <= 10; j++) { %>
						<td id="td_<%= i %>_<%= j %>">
							<span><%= i %>-<%= j %></span>
						</td>
						<% } %>
					</tr>
					<% } %>
				</table>
			</div>
		<% } %>
	<% } %>
	
<% } %>
</div>
<script src="/js/jquery.event.drag-2.2.js"></script>
<script src="/js/jquery.event.drop-2.2.js"></script>
<script>
	$(function() {
		$(".select_board a").click(function(e) {
			e.preventDefault();
			$(".select_board a").removeClass("on");
			$(this).addClass("on");
			$(".layer_start").fadeIn(200);
			$(".layer_start").css({"top":$(this).offset().top + 73, "left":$(this).offset().left + 50}, 100);
			$(".layer_start").attr("action","/selectBoard?roomId=<%= room._id %>&board=" + $(this).parent().attr("class"));
		});
		$(".select_engine a").click(function(e) {
			e.preventDefault();
			$(this).next().fadeIn(200);
			$(this).next().attr("action","/selectEngine?roomId=<%= room._id %>&engine=" + $(this).find("img").attr("alt") + "&id=" + $(this).find("img").attr("id"));
			var select_energy;
			if ($(this).find("img").attr("id") === "all") {
				select_energy = '<div class="select_energy">';
				select_energy += '<ul>';
				select_energy += '<li><a href="#n"><img src="/images/tile_energy_blue.jpg" alt="blue" /></a></li>';
				select_energy += '<li><a href="#n"><img src="/images/tile_energy_red.jpg" alt="red" /></a></li>';
				select_energy += '<li><a href="#n"><img src="/images/tile_energy_orange.jpg" alt="orange" /></a></li>';
				select_energy += '<li><a href="#n"><img src="/images/tile_energy_green.jpg" alt="green" /></a></li>';
				select_energy += '</ul>';
				select_energy += '</div>';
				$(".select_engine").append(select_energy);
				$(".select_energy a").click(function(e) {
					$(".select_energy a").removeClass("on");
					$(this).addClass("on");
					e.preventDefault();
					$(".select_engine form").attr("action","/selectEngine?roomId=<%= room._id %>&engine=" + $(".select_engine a").find("img").attr("alt") + "&id=" + $(this).find("img").attr("alt"));
				});
			}
		});
		var posTop = 307;
		var posLeft = 20;
		var posValue = 70;
		$(".drag").drag(function(ev, dd) {
			$(this).css({
				top: Math.round( dd.offsetY / posValue ) * posValue + 27,
				left: Math.round( dd.offsetX / posValue ) * posValue + 20
			});
		});
		$(".drag").drop(function(ev, dd) {
			$(this).attr("id", "");
			var x = (parseInt($(this).css("top")) - posTop) / posValue + 1;
			var y = (parseInt($(this).css("left")) - posLeft) / posValue + 1;
			if ($(".mine").hasClass("board_a_classic")) {
				if (x > 0 && x < 10 && y > 0 && y < 10) {
					$(this).attr("id", (x + "_" + y));
					if (x === 8 && y === 1 || x === 9 && y === 1 || x === 9 && y === 2 || x === 4 && y === 5) {
						$(this).attr("id", "");
					}
				}
			} else if ($(".mine").hasClass("board_b_classic")) {
				if (x > 0 && x < 10 && y > 0 && y < 10) {
					$(this).attr("id", (x + "_" + y));
					if (x === 1 && y === 1 || x === 1 && y === 2 || x === 9 && y === 1 || x === 5 && y === 5) {
						$(this).attr("id", "");
					}
				}
			} else if ($(".mine").hasClass("board_c_classic")) {
				if (x > 0 && x < 9 && y > 0 && y < 11) {
					$(this).attr("id", (x + "_" + y));
					if (x === 8 && y === 1 || x === 8 && y === 2 || x === 4 && y === 6) {
						$(this).attr("id", "");
					}
				}
			} else if ($(".mine").hasClass("board_d_classic")) {
				if (x > 0 && x < 9 && y > 0 && y < 11) {
					$(this).attr("id", (x + "_" + y));
					if (x === 1 && y === 1 || x === 2 && y === 1 || x === 5 && y === 6) {
						$(this).attr("id", "");
					}
				}
			} else if ($(".mine").hasClass("board_e_classic")) {
				if (x > 0 && x < 10 && y > 0 && y < 10) {
					$(this).attr("id", (x + "_" + y));
					if (x === 9 && y === 1 || x === 9 && y === 2 || x === 9 && y === 3 || x === 5 && y === 5) {
						$(this).attr("id", "");
					}
				}
			} else if ($(".mine").hasClass("board_a_expert")) {
				if (x > 0 && x < 10 && y > 0 && y < 10) {
					$(this).attr("id", (x + "_" + y));
					if (x === 3 && y === 3 || x === 3 && y === 7 || x === 7 && y === 3 || x === 7 && y === 7) {
						$(this).attr("id", "");
					}
				}
			} else if ($(".mine").hasClass("board_b_expert")) {
				if (x > 0 && x < 9 && y > 0 && y < 11) {
					$(this).attr("id", (x + "_" + y));
					if (x === 1 && y === 5 || x === 2 && y === 5 || x === 3 && y === 5) {
						$(this).attr("id", "");
					}
				}
			} else if ($(".mine").hasClass("board_c_expert")) {
				if (x > 0 && x < 10 && y > 0 && y < 10) {
					$(this).attr("id", (x + "_" + y));
					if (x === 1 && y === 5 || x === 2 && y === 5 || x === 8 && y === 5 || x === 9 && y === 5) {
						$(this).attr("id", "");
					}
				}
			} else if ($(".mine").hasClass("board_d_expert")) {
				if (x > 0 && x < 10 && y > 0 && y < 10) {
					$(this).attr("id", (x + "_" + y));
					if (x === 1 && y === 5 || x === 2 && y === 5 || x === 3 && y === 5 || x === 4 && y === 5) {
						$(this).attr("id", "");
					}
				}
			} else if ($(".mine").hasClass("board_e_expert")) {
				if (x > 0 && x < 9 && y > 0 && y < 11) {
					$(this).attr("id", (x + "_" + y));
					if (x === 3 && y === 6 || x === 6 && y === 3 || x === 6 && y === 8) {
						$(this).attr("id", "");
					}
				}
			}
			if ($(this).hasClass("tile_engine") || $(this).hasClass("tile_option")) {
				$(this).parent().attr("class", "");
				if (parseInt($(this).css("transform").split(",")[5]) === 35) {
					$(this).parent().addClass("disable_" + (parseInt($(this)[0].id.split('_')[0]) + 1) + '_' + $(this)[0].id.split('_')[1]);
				} else {
					$(this).parent().addClass("disable_" + $(this)[0].id.split('_')[0] + '_' + (parseInt($(this)[0].id.split('_')[1]) + 1));
				}
			}
			$(".board td").attr("class", "");
			$(".board td p, td .score").remove();
		});
		if ($(".saved").length > 0) {
			for (var i = 0; i < $(".saved").length; i++) {
				$(".saved").eq(i).css({
					top: posValue * ($(".saved").eq(i).attr("class").split('_')[1] - 1) + posTop,
					left: posValue * ($(".saved").eq(i).attr("class").split('_')[2].split(' ')[0] - 1) + posLeft
				});
				if ($(".saved").eq(i).attr("alt").split("_")[0] + "_" + $(".saved").eq(i).attr("alt").split("_")[1] === "tile_engine") {
					$(".saved").eq(i).removeClass("tile").addClass("tile_engine");
				} else if ($(".saved").eq(i).attr("alt").split("_")[0] + "_" + $(".saved").eq(i).attr("alt").split("_")[1] === "tile_option") {
					$(".saved").eq(i).removeClass("tile").addClass("tile_option");
				}
			}
			$(".saved").fadeIn();
		}
		$(".drag").click(function() {
			if (!$(this).hasClass("rotate_1") && !$(this).hasClass("rotate_2") && !$(this).hasClass("rotate_3")) {
				$(this).addClass("rotate_1").removeClass("rotate_0");
			} else if ($(this).hasClass("rotate_1")) {
				$(this).addClass("rotate_2");
				$(this).removeClass("rotate_1");
			} else if ($(this).hasClass("rotate_2")) {
				$(this).addClass("rotate_3");
				$(this).removeClass("rotate_2");
			} else if ($(this).hasClass("rotate_3")) {
				$(this).removeClass("rotate_3").addClass("rotate_0");
			}
			if ($(this).hasClass("tile_engine") || $(this).hasClass("tile_option")) {
				$(this).parent().attr("class", "");
				if (parseInt($(this).css("transform").split(",")[5]) === 35) {
					$(this).parent().addClass("disable_" + (parseInt($(this)[0].id.split('_')[0]) + 1) + '_' + $(this)[0].id.split('_')[1]);
				} else {
					$(this).parent().addClass("disable_" + $(this)[0].id.split('_')[0] + '_' + (parseInt($(this)[0].id.split('_')[1]) + 1));
				}
			}
		});
		function connect(complete, needTile, energy, result) {
			var energyRow, energyCol, energyType, energyDirection, row, col, rotate, name, rowC, colC, rotateC, nameC, directionC, energyEO;
			var solve = [];
			for (var p = 0; p < energy.length; p++) {
				energyRow = energy[p].row;
	            energyCol = energy[p].col;
	            energyType = energy[p].type;
	            energyDirection = energy[p].direction;
				energyEO = energy[p].engine_output;
	            if (energyEO) {
                    needTile.push({
                    	row: energyRow,
                    	col: energyCol,
                    	type: energyType,
                    	direction: energyDirection,
                    	engine_output: energyEO
                    });
	            } else if (energyType === "black") {
	            	needTile.push({
                    	row: energyRow,
                    	col: energyCol,
                    	type: energyType,
                    	direction: energyDirection,
                    	engine_output: "black"
                    });
	            }
			}
			for (var m = 0; m < needTile.length; m++) {
		        row = needTile[m].row;
		        col = needTile[m].col;
		        type = needTile[m].type;
		        direction = needTile[m].direction;
		        for (var n = 0; n < energy.length; n++) {
		            energyRow = energy[n].row;
		            energyCol = energy[n].col;
		            energyType = energy[n].type;
		            energyDirection = energy[n].direction;
		            energyEO = energy[n].engine_output;
		            if (energyRow === row && energyCol === col) {
	            		if (energyDirection === direction && energyType === type.split("_")[1]) {
	            			solve.push({
		                    	row: energyRow,
                            	col: energyCol,
                            	type: energyType
		                    });
	            		}
	            		if (solve.length !== needTile.length) {
	            			for (var o = 0; o < complete.length; o++) {
						        rowC = complete[o].row;
						        colC = complete[o].col;
						        nameC = complete[o].name;
						        directionC = complete[o].direction;
						        if (energyEO) {
						        	if (row === rowC && col === colC && nameC === "tile_white" && energyDirection === (directionC + 2) % 4) {
					        			solve.push({
					                    	row: rowC,
			                            	col: colC,
			                            	type: energyType,
			                            	name: nameC
					                    });
						            }
						        } else if (row === rowC && col === colC && nameC === "tile_black" && energyDirection === (directionC + 2) % 4) {
				        			solve.push({
				                    	row: rowC,
		                            	col: colC,
		                            	type: energyType,
		                            	name: nameC
				                    });
						        }
				            }
	            		}
			        }
			    }
			}
			for (var m = 0; m < needTile.length; m++) {
		        row = needTile[m].row;
		        col = needTile[m].col;
		        type = needTile[m].type;
		        direction = needTile[m].direction;
		        for (var n = 0; n < energy.length; n++) {
		            energyRow = energy[n].row;
		            energyCol = energy[n].col;
		            energyType = energy[n].type;
		            energyDirection = energy[n].direction;
		            energyEO = energy[n].engine_output;
		            if (energyEO && energyEO && row === energyRow && col === energyCol) {
			        	if (parseInt(energyEO.split("_")[0]) >= type.split("_")[0] && direction === energyDirection) {
			        		solve.push({
		                    	row: row,
	                        	col: col,
	                        	type: energyType,
	                        	bonus: type.split("_")[0] * 5
		                    });
			            }
			        }
			    }
			}
			console.log("solve", solve);
			return solve;
		}
		function match(complete, needTile, energy) {
			var energyRow, energyCol, energyType, energyDirection, row, col, rotate, name;
			for (var m = 0; m < complete.length; m++) {
		        row = complete[m].row;
		        col = complete[m].col;
		        rotate = complete[m].rotate;
		        name = complete[m].name;
		        for (var n = 0; n < energy.length; n++) {
		            energyRow = energy[n].row;
		            energyCol = energy[n].col;
		            energyType = energy[n].type;
		            energyDirection = energy[n].direction;
		            if (energyRow === row && energyCol === col) {
		                if (name === "tile_way_1") {
		            		if (rotate === energyDirection) {
		                		if (energyDirection === 0) {
		                            energy[n].row --;
		                        } else if (energyDirection === 1) {
		                            energy[n].col ++;
		                        } else if (energyDirection === 2) {
		                            energy[n].row ++;
		                        } else if (energyDirection === 3) {
		                            energy[n].col --;
		                        }
		                    } else continue;
		                } else if (name === "tile_way_2") {
		                	if (energyDirection === 0) {
	                            if (rotate === 2) {
	                        		energy[n].direction = 1;
	                            	energy[n].col ++;
	                        	} else if (rotate === 3) {
	                        		energy[n].direction = 3;
	                            	energy[n].col --;
	                        	} else continue;
	                        } else if (energyDirection === 1) {
	                        	if (rotate === 0) {
	                        		energy[n].direction = 0;
	                            	energy[n].row --;
	                        	} else if (rotate === 3) {
	                        		energy[n].direction = 2;
	                            	energy[n].row ++;
	                        	} else continue;
	                        } else if (energyDirection === 2) {
	                            if (rotate === 0) {
	                        		energy[n].direction = 3;
	                            	energy[n].col --;
	                        	} else if (rotate === 1) {
	                        		energy[n].direction = 1;
	                            	energy[n].col ++;
	                        	} else continue;
	                        } else if (energyDirection === 3) {
	                            if (rotate === 1) {
	                        		energy[n].direction = 0;
	                            	energy[n].row --;
	                        	} else if (rotate === 2) {
	                        		energy[n].direction = 2;
	                            	energy[n].row ++;
	                        	} else continue;
	                        } else continue;
		                } else if (name === "tile_way_3") {
		                	if (energyDirection === 0) {
	                            if (rotate === 0) {
	                        		energy[n].direction = 0;
	                            	energy[n].row --;
	                            	energy.push({ row: energy[n].row + 1, col: energy[n].col + 1, type: energyType, direction: 1 });
	                        	} else if (rotate === 1) {
	                        		energy[n].direction = 3;
	                            	energy[n].col --;
	                            	energy.push({ row: energy[n].row, col: energy[n].col + 2, type: energyType, direction: 1 });
	                        	} else if (rotate === 2) {
	                        		energy[n].direction = 0;
	                            	energy[n].row --;
	                            	energy.push({ row: energy[n].row + 1, col: energy[n].col - 1, type: energyType, direction: 3 });
	                        	} else continue;
	                        } else if (energyDirection === 1) {
	                        	if (rotate === 1) {
	                        		energy[n].direction = 1;
	                            	energy[n].col ++;
	                            	energy.push({ row: energy[n].row + 1, col: energy[n].col - 1, type: energyType, direction: 2 });
	                        	} else if (rotate === 2) {
	                        		energy[n].direction = 0;
	                            	energy[n].row --;
	                            	energy.push({ row: energy[n].row + 2, col: energy[n].col, type: energyType, direction: 2 });
	                        	} else if (rotate === 3) {
	                        		energy[n].direction = 0;
	                            	energy[n].row --;
	                            	energy.push({ row: energy[n].row + 1, col: energy[n].col + 1, type: energyType, direction: 1 });
	                        	} else continue;
	                        } else if (energyDirection === 2) {
	                            if (rotate === 0) {
	                        		energy[n].direction = 2;
	                            	energy[n].row ++;
	                            	energy.push({ row: energy[n].row - 1, col: energy[n].col + 1, type: energyType, direction: 1 });
	                        	} else if (rotate === 2) {
	                        		energy[n].direction = 3;
	                            	energy[n].col --;
	                            	energy.push({ row: energy[n].row + 1, col: energy[n].col + 1, type: energyType, direction: 2 });
	                        	} else if (rotate === 3) {
	                        		energy[n].direction = 1;
	                            	energy[n].col ++;
	                            	energy.push({ row: energy[n].row, col: energy[n].col - 2, type: energyType, direction: 3 });
	                        	} else continue;
	                        } else if (energyDirection === 3) {
	                            if (rotate === 0) {
	                        		energy[n].direction = 0;
	                            	energy[n].row --;
	                            	energy.push({ row: energy[n].row + 2, col: energy[n].col, type: energyType, direction: 2 });
	                        	} else if (rotate === 1) {
	                        		energy[n].direction = 3;
	                            	energy[n].col --;
	                            	energy.push({ row: energy[n].row + 1, col: energy[n].col + 1, type: energyType, direction: 2 });
	                        	} else if (rotate === 3) {
	                        		energy[n].direction = 0;
	                            	energy[n].row --;
	                            	energy.push({ row: energy[n].row + 1, col: energy[n].col - 1, type: energyType, direction: 3 });
	                        	} else continue;
	                        } else continue;
		                } else if (name === "tile_way_4") {
                            if (energyDirection === 0) {
                        		energy[n].direction = 0;
                            	energy[n].row --;
                            	energy.push({ row: energy[n].row + 1, col: energy[n].col + 1, type: energyType, direction: 1 });
			                    energy.push({ row: energy[n].row + 1, col: energy[n].col - 1, type: energyType, direction: 3 });
                        	} else if (energyDirection === 1) {
                        		energy[n].direction = 1;
                            	energy[n].col ++;
                            	energy.push({ row: energy[n].row - 1, col: energy[n].col - 1, type: energyType, direction: 0 });
			                    energy.push({ row: energy[n].row + 1, col: energy[n].col - 1, type: energyType, direction: 2 });
                        	} else if (energyDirection === 2) {
                        		energy[n].direction = 2;
                            	energy[n].row ++;
                            	energy.push({ row: energy[n].row - 1, col: energy[n].col + 1, type: energyType, direction: 1 });
			                    energy.push({ row: energy[n].row - 1, col: energy[n].col - 1, type: energyType, direction: 3 });
                        	} else if (energyDirection === 3) {
                        		energy[n].direction = 3;
                            	energy[n].col --;
                            	energy.push({ row: energy[n].row - 1, col: energy[n].col + 1, type: energyType, direction: 0 });
			                    energy.push({ row: energy[n].row + 1, col: energy[n].col + 1, type: energyType, direction: 2 });
                        	} else continue;
		                } else if (name === "tile_way_5") {
	                		if (energyDirection === 0) {
	                            energy[n].row --;
	                        } else if (energyDirection === 1) {
	                            energy[n].col ++;
	                        } else if (energyDirection === 2) {
	                            energy[n].row ++;
	                        } else if (energyDirection === 3) {
	                            energy[n].col --;
	                        } else continue;
		                } else if (name === "tile_way_6") {
		                	if (energyDirection === 0) {
	                            if (rotate === 0 || rotate === 2) {
	                        		energy[n].direction = 1;
	                            	energy[n].col ++;
	                        	} else if (rotate === 1 || rotate === 3) {
	                        		energy[n].direction = 3;
	                            	energy[n].col --;
	                        	} else continue;
	                        } else if (energyDirection === 1) {
	                        	if (rotate === 0 || rotate === 2) {
	                        		energy[n].direction = 0;
	                            	energy[n].row --;
	                        	} else if (rotate === 1 || rotate === 3) {
	                        		energy[n].direction = 2;
	                            	energy[n].row ++;
	                        	} else continue;
	                        } else if (energyDirection === 2) {
	                            if (rotate === 0 || rotate === 2) {
	                        		energy[n].direction = 3;
	                            	energy[n].col --;
	                        	} else if (rotate === 1 || rotate === 3) {
	                        		energy[n].direction = 1;
	                            	energy[n].col ++;
	                        	} else continue;
	                        } else if (energyDirection === 3) {
	                            if (rotate === 1 || rotate === 3) {
	                        		energy[n].direction = 0;
	                            	energy[n].row --;
	                        	} else if (rotate === 0 || rotate === 2) {
	                        		energy[n].direction = 2;
	                            	energy[n].row ++;
	                        	} else continue;
	                        } else continue;
		                } else if (name === "tile_option") {
		                	if (energyDirection === 0) {
	                            if (rotate === 0 || rotate === 2) {
	                        		energy[n].direction = 0;
	                            	energy[n].col ++;
	                            	energy[n].row --;
	                            	for (var m = 0; m < energy.length; m++) {
	                            		if (energy[m].col === energy[n].col && energy[m].row === energy[n].row + 1) {
	                            			energy[m].col --;
	                            			energy[m].row --;
	                            		}
	                            	}
	                        	} else continue;
	                        } else if (energyDirection === 1) {
	                        	if (rotate === 1 || rotate === 3) {
	                        		energy[n].direction = 1;
	                        		energy[n].col ++;
	                            	energy[n].row ++;
	                            	for (var m = 0; m < energy.length; m++) {

	                            		if (energy[m].col === energy[n].col - 1 && energy[m].row === energy[n].row) {
	                            			console.log("energy[m], energy[n]", energy[m], energy[n]);
	                            			energy[m].col ++;
	                            			energy[m].row --;
	                            		}
	                            	}
	                        	} else continue;
	                        } else if (energyDirection === 2) {
	                            if (rotate === 0 || rotate === 2) {
	                        		energy[n].direction = 2;
	                            	energy[n].col ++;
	                            	energy[n].row ++;
	                            	for (var m = 0; m < energy.length; m++) {
	                            		if (energy[m].col === energy[n].col && energy[m].row === energy[n].row - 1) {
	                            			energy[m].col --;
	                            			energy[m].row ++;
	                            		}
	                            	}
	                        	} else continue;
	                        } else if (energyDirection === 3) {
	                            if (rotate === 1 || rotate === 3) {
	                        		energy[n].direction = 3;
	                        		energy[n].col --;
	                            	energy[n].row ++;
	                            	for (var m = 0; m < energy.length; m++) {
	                            		if (energy[m].col === energy[n].col + 1 && energy[m].row === energy[n].row) {
	                            			energy[m].col --;
	                            			energy[m].row --;
	                            		}
	                            	}
	                        	} else continue;
	                        } else continue;
		                } else continue;
		            }
		            if (energyRow === row && energyCol === col) {
		            	match(complete, needTile, energy);
		            } 
		        }
		    }
		}
		function checkTile() {
			var posType = ["top_1", "top_2", "bottom_1", "bottom_2", "left", "right"];
			var needTile = [];
			var posTypeRowNum = [];
	        var posTypeColNum = [];
	        var posTypeDirection = [];
			var tile_engine = [];
			var complete = [];
			var energy = [];
			var scoreTile = [];
			var engineNum, engineAttr, row, col, rotate, needTileRow, needTileCol, needTileRotate, needTileType, directionLetter, typeIO;
			var result = 0;
			tile_engine[0] = { name: "tile_engine_0", score: 8, bonus: "", top_1: "", top_2: "", bottom_1: "2_blue_input", bottom_2: "", left: "2_red_input", right: "black" };
	        tile_engine[1] = { name: "tile_engine_1", score: 9, bonus: "", top_1: "3_orange_input", top_2: "", bottom_1: "", bottom_2: "", left: "2_green_input", right: "black" };
	        tile_engine[2] = { name: "tile_engine_2", score: 5, bonus: "", top_1: "", top_2: "", bottom_1: "3_blue_input", bottom_2: "", left: "2_red_input", right: "2_blue_output" };
	        tile_engine[3] = { name: "tile_engine_3", score: 7, bonus: "", top_1: "", top_2: "", bottom_1: "", bottom_2: "1_green_output", left: "1_red_input", right: "" };
	        tile_engine[4] = { name: "tile_engine_4", score: 12, bonus: "", top_1: "", top_2: "", bottom_1: "1_orange_input", bottom_2: "", left: "2_blue_input", right: "" };
	        tile_engine[5] = { name: "tile_engine_5", score: 9, bonus: "", top_1: "1_green_input", top_2: "", bottom_1: "1_red_input", bottom_2: "", left: "1_orange_input", right: "3_blue_output" };
	        tile_engine[6] = { name: "tile_engine_6", score: 8, bonus: "", top_1: "3_blue_input", top_2: "", bottom_1: "1_red_input", bottom_2: "", left: "1_green_input", right: "3_orange_output" };
	        tile_engine[7] = { name: "tile_engine_7", score: 8, bonus: "", top_1: "3_red_input", top_2: "", bottom_1: "", bottom_2: "", left: "2_orange_input", right: "1_blue_output" };
	        tile_engine[8] = { name: "tile_engine_8", score: 7, bonus: "", top_1: "1_red_input", top_2: "", bottom_1: "", bottom_2: "", left: "", right: "black" };
	        tile_engine[9] = { name: "tile_engine_9", score: 7, bonus: "", top_1: "", top_2: "", bottom_1: "1_blue_input", bottom_2: "", left: "3_green_input", right: "black" };
	        tile_engine[10] = { name: "tile_engine_10", score: 6, bonus: "green", top_1: "2_red_input", top_2: "", bottom_1: "3_green_input", bottom_2: "", left: "", right: "black" };
	        tile_engine[11] = { name: "tile_engine_11", score: 4, bonus: "", top_1: "2_blue_input", top_2: "", bottom_1: "3_green_input", bottom_2: "", left: "", right: "3_red_output" };
	        tile_engine[12] = { name: "tile_engine_12", score: 11, bonus: "", top_1: "1_red_input", top_2: "", bottom_1: "2_blue_input", bottom_2: "", left: "1_orange_input", right: "2_green_output" };
	        tile_engine[13] = { name: "tile_engine_13", score: 13, bonus: "", top_1: "1_blue_input", top_2: "", bottom_1: "1_red_input", bottom_2: "", left: "", right: "black" };
	        tile_engine[14] = { name: "tile_engine_14", score: 10, bonus: "", top_1: "1_orange_input", top_2: "", bottom_1: "", bottom_2: "", left: "2_blue_input", right: "1_red_output" };
	        tile_engine[15] = { name: "tile_engine_15", score: 5, bonus: "all", top_1: "1_blue_input", top_2: "", bottom_1: "1_orange_input", bottom_2: "", left: "", right: "1_red_output" };
	        tile_engine[16] = { name: "tile_engine_16", score: 7, bonus: "", top_1: "3_orange_input", top_2: "", bottom_1: "2_red_input", bottom_2: "", left: "", right: "2_green_output" };
	        tile_engine[17] = { name: "tile_engine_17", score: 8, bonus: "", top_1: "2_red_input", top_2: "", bottom_1: "", bottom_2: "", left: "2_blue_input", right: "2_orange_output" };
	        tile_engine[18] = { name: "tile_engine_18", score: 7, bonus: "orange", top_1: "2_blue_input", top_2: "", bottom_1: "1_green_input", bottom_2: "", left: "2_orange_input", right: "2_red_output" };
	        tile_engine[19] = { name: "tile_engine_19", score: 11, bonus: "", top_1: "", top_2: "", bottom_1: "1_green_input", bottom_2: "", left: "2_red_input", right: "1_blue_output" };
	        tile_engine[20] = { name: "tile_engine_20", score: 9, bonus: "", top_1: "", top_2: "", bottom_1: "2_red_input", bottom_2: "", left: "2_green_input", right: "1_blue_output" };
	        tile_engine[21] = { name: "tile_engine_21", score: 3, bonus: "red", top_1: "", top_2: "1_blue_output", bottom_1: "", bottom_2: "", left: "3_red_input", right: "" };
	        tile_engine[22] = { name: "tile_engine_22", score: 10, bonus: "", top_1: "1_red_input", top_2: "", bottom_1: "", bottom_2: "1_green_output", left: "3_orange_input", right: "" };
	        tile_engine[23] = { name: "tile_engine_23", score: 5, bonus: "", top_1: "", top_2: "3_red_output", bottom_1: "2_orange_input", bottom_2: "", left: "2_red_input", right: "" };
	        tile_engine[24] = { name: "tile_engine_24", score: 5, bonus: "", top_1: "", top_2: "", bottom_1: "3_blue_input", bottom_2: "", left: "", right: "black" };
	        tile_engine[25] = { name: "tile_engine_25", score: 10, bonus: "", top_1: "1_orange_input", top_2: "", bottom_1: "", bottom_2: "black", left: "3_red_input", right: "" };
	        tile_engine[26] = { name: "tile_engine_26", score: 5, bonus: "", top_1: "1_blue_input", top_2: "", bottom_1: "", bottom_2: "3_orange_output", left: "", right: "" };
	        tile_engine[27] = { name: "tile_engine_27", score: 6, bonus: "", top_1: "", top_2: "", bottom_1: "1_orange_input", bottom_2: "", left: "3_blue_input", right: "3_green_output" };
	        tile_engine[28] = { name: "tile_engine_28", score: 6, bonus: "", top_1: "", top_2: "", bottom_1: "", bottom_2: "", left: "2_green_input", right: "black" };
	        tile_engine[29] = { name: "tile_engine_29", score: 7, bonus: "", top_1: "2_green_input", top_2: "", bottom_1: "3_red_input", bottom_2: "", left: "", right: "1_red_output" };
	        tile_engine[30] = { name: "tile_engine_30", score: 4, bonus: "", top_1: "3_green_input", top_2: "", bottom_1: "", bottom_2: "", left: "", right: "1_red_output" };
	        tile_engine[31] = { name: "tile_engine_31", score: 7, bonus: "", top_1: "", top_2: "2_orange_output", bottom_1: "1_orange_input", bottom_2: "", left: "3_green_input", right: "" };
	        tile_engine[32] = { name: "tile_engine_32", score: 6, bonus: "blue", top_1: "3_green_input", top_2: "", bottom_1: "1_blue_input", bottom_2: "", left: "", right: "1_orange_output" };
	        tile_engine[33] = { name: "tile_engine_33", score: 9, bonus: "", top_1: "1_orange_input", top_2: "", bottom_1: "1_blue_input", bottom_2: "", left: "", right: "2_orange_output" };
	        tile_engine[34] = { name: "tile_engine_34", score: 1, bonus: "", top_1: "", top_2: "", bottom_1: "", bottom_2: "", left: "3_orange_input", right: "3_green_output" };
	        tile_engine[35] = { name: "tile_engine_35", score: 10, bonus: "", top_1: "2_blue_input", top_2: "", bottom_1: "2_green_input", bottom_2: "", left: "", right: "1_orange_output" };
	        tile_engine[36] = { name: "tile_engine_36", score: 6, bonus: "", top_1: "", top_2: "", bottom_1: "2_orange_input", bottom_2: "", left: "1_green_input", right: "3_red_output" };
	        tile_engine[37] = { name: "tile_engine_37", score: 11, bonus: "", top_1: "1_green_input", top_2: "", bottom_1: "", bottom_2: "", left: "2_orange_input", right: "black" };
	        tile_engine[38] = { name: "tile_engine_38", score: 9, bonus: "", top_1: "2_red_input", top_2: "", bottom_1: "", bottom_2: "", left: "1_green_input", right: "2_orange_output" };
	        tile_engine[39] = { name: "tile_engine_39", score: 6, bonus: "", top_1: "1_red_input", top_2: "", bottom_1: "", bottom_2: "", left: "1_blue_input", right: "3_green_output" };
	        tile_engine[40] = { name: "tile_engine_40", score: 3, bonus: "", top_1: "", top_2: "", bottom_1: "", bottom_2: "", left: "3_blue_input", right: "2_red_output" };
	        tile_engine[41] = { name: "tile_engine_41", score: 6, bonus: "", top_1: "", top_2: "2_blue_output", bottom_1: "3_orange_input", bottom_2: "", left: "1_blue_input", right: "" };
	        tile_engine[42] = { name: "tile_engine_42", score: 5, bonus: "", top_1: "", top_2: "", bottom_1: "", bottom_2: "", left: "2_orange_input", right: "1_orange_output" };
	        tile_engine[43] = { name: "tile_engine_43", score: 6, bonus: "", top_1: "3_blue_input", top_2: "", bottom_1: "", bottom_2: "", left: "3_red_input", right: "1_red_output" };
	        tile_engine[44] = { name: "tile_engine_44", score: 8, bonus: "", top_1: "2_green_input", top_2: "", bottom_1: "", bottom_2: "1_green_output", left: "2_red_input", right: "" };
	        tile_engine[45] = { name: "tile_engine_45", score: 4, bonus: "", top_1: "", top_2: "2_green_output", bottom_1: "1_green_input", bottom_2: "", left: "", right: "" };
	        tile_engine[46] = { name: "tile_engine_46", score: 7, bonus: "", top_1: "2_orange_input", top_2: "", bottom_1: "", bottom_2: "", left: "2_blue_input", right: "2_green_output" };
	        tile_engine[47] = { name: "tile_engine_47", score: 10, bonus: "", top_1: "", top_2: "", bottom_1: "1_blue_input", bottom_2: "", left: "2_green_input", right: "2_red_output" };
	        tile_engine[48] = { name: "tile_engine_48", score: 5, bonus: "", top_1: "", top_2: "3_blue_output", bottom_1: "1_orange_input", bottom_2: "", left: "3_red_input", right: "" };
	        tile_engine[49] = { name: "tile_engine_49", score: 4, bonus: "", top_1: "3_green_input", top_2: "", bottom_1: "3_red_input", bottom_2: "", left: "", right: "3_orange_output" };
	        tile_engine[50] = { name: "tile_engine_50", score: 8, bonus: "", top_1: "3_orange_input", top_2: "", bottom_1: "3_blue_input", bottom_2: "", left: "", right: "black" };
	        tile_engine[51] = { name: "tile_engine_51", score: 2, bonus: "", top_1: "", top_2: "", bottom_1: "", bottom_2: "", left: "2_green_input", right: "3_blue_output" };
	        tile_engine[52] = { name: "tile_engine_52", score: 14, bonus: "", top_1: "1_orange_input", top_2: "", bottom_1: "1_blue_input", bottom_2: "", left: "2_green_input", right: "black" };
	        tile_engine[53] = { name: "tile_engine_53", score: 9, bonus: "", top_1: "3_orange_input", top_2: "", bottom_1: "", bottom_2: "1_blue_output", left: "1_green_input", right: "" };
	        tile_engine[54] = { name: "tile_engine_54", score: 5, bonus: "", top_1: "", top_2: "", bottom_1: "2_orange_input", bottom_2: "", left: "", right: "2_blue_output" };
			for (var i = 0; i < $(".wrap_tile img").length; i++) {
				if ($(".wrap_tile img")[i].id) {
					if ($(".wrap_tile img").eq(i).hasClass("saved")) {
						complete.push({ row: parseInt($(".wrap_tile img")[i].id.split("_")[0]), col: parseInt($(".wrap_tile img")[i].id.split("_")[1]), name: $(".wrap_tile img")[i].alt, direction: parseInt($(".wrap_tile img")[i].className.split("rotate_")[1]), rotate: parseInt($(".wrap_tile img")[i].className.split("rotate_")[1]), new: "no" });
					} else {
						complete.push({ row: parseInt($(".wrap_tile img")[i].id.split("_")[0]), col: parseInt($(".wrap_tile img")[i].id.split("_")[1]), name: $(".wrap_tile img")[i].alt, direction: parseInt($(".wrap_tile img")[i].className.split("rotate_")[1]), rotate: parseInt($(".wrap_tile img")[i].className.split("rotate_")[1]), new: "yes" });
					}
				}
			}
			for (var j = 0; j < complete.length; j++) {
                if (complete[j].name.split("tile_energy_")[1]) {
                	energyType = complete[j].name.split("tile_energy_")[1];
                	row = complete[j].row;
                    col = complete[j].col;
                    energy.push({row: row - 1, col: col, type: energyType, direction: 0});
                    energy.push({row: row, col: col - 1, type: energyType, direction: 3});
                    energy.push({row: row, col: col + 1, type: energyType, direction: 1});
                    energy.push({row: row + 1 ,col: col, type: energyType, direction: 2});
                } else if (complete[j].name.split("tile_engine_")[1]) {
                    //엔진의 번호를 engineAttr에 담음
                    engineNum = complete[j].name.split("tile_engine_")[1];
                    engineAttr = tile_engine[engineNum];
                    row = complete[j].row;
                    col = complete[j].col;
                    rotate = complete[j].rotate;
                    //항목 : posType = ["top_1", "top_2", "bottom_1", "bottom_2", "left", "right"];
                    for (var i = 0; i < posType.length; i++) {
                        if (engineAttr[posType[i]] !== "") {
                        	typeIO = engineAttr[posType[i]].split("_")[2];
                        	if (typeIO === "output" || engineAttr[posType[i]] === "black") {
	                        	if (rotate === 0) {
			                        posTypeColNum = [0, 1, 0, 1, -1, 2];
			                        posTypeRowNum = [-1, -1, 1, 1, 0, 0];
			                        posTypeDirection = [2, 2, 0, 0, 1, 3];
			                    } else if (rotate === 1) {
			                        posTypeColNum = [1, 1, -1, -1, 0, 0];
			                        posTypeRowNum = [0, 1, 0, 1, -1, 2];
			                        posTypeDirection = [3, 3, 1, 1, 2, 0];
			                    } else if (rotate === 2) {
			                        posTypeColNum = [1, 0, 1, 0, 2, -1];
			                        posTypeRowNum = [1, 1, -1, -1, 0, 0];
			                        posTypeDirection = [0, 0, 2, 2, 3, 1];
			                     } else if (rotate === 3) {
			                        posTypeColNum = [-1, -1, 1, 1, 0, 0];
			                        posTypeRowNum = [1, 0, 1, 0, 2, -1];
			                        posTypeDirection = [1, 1, 3, 3, 0, 2];
			                    }
	                        	posTypeDirection[i] = (posTypeDirection[i] + 2) % 4;
	                        	if (engineAttr[posType[i]] === "black") {
	                        		energy.push({
				                    	row: row + posTypeRowNum[i],
		                            	col: col + posTypeColNum[i],
		                            	type: engineAttr[posType[i]],
		                            	direction: posTypeDirection[i],
				                    });
	                        	} else {
	                        		energy.push({
				                    	row: row + posTypeRowNum[i],
		                            	col: col + posTypeColNum[i],
		                            	type: engineAttr[posType[i]].split("_")[1],
		                            	direction: posTypeDirection[i],
		                            	engine_output: engineAttr[posType[i]]
				                    });
	                        	}
	                        } else {
	                        	if (rotate === 0) {
			                        posTypeColNum = [0, 1, 0, 1, 0, 1];
			                        posTypeRowNum = [0, 0, 0, 0, 0, 0];
			                        posTypeDirection = [2, 2, 0, 0, 1, 1];
			                    } else if (rotate === 1) {
			                        posTypeColNum = [0, 0, 0, 0, 0, 0];
			                        posTypeRowNum = [0, 1, 0, 1, 0, 1];
			                        posTypeDirection = [3, 3, 1, 1, 2, 2];
			                    } else if (rotate === 2) {
			                        posTypeColNum = [1, 0, 1, 0, 1, 0];
			                        posTypeRowNum = [0, 0, 0, 0, 0, 0];
			                        posTypeDirection = [0, 0, 2, 2, 3, 3];
			                    } else if (rotate === 3) {
			                        posTypeColNum = [0, 0, 0, 0, 0, 0];
			                        posTypeRowNum = [1, 0, 1, 0, 1, 0];
			                        posTypeDirection = [1, 1, 3, 3, 0, 0];
			                    }
		                        needTile.push({ 
	                            	row: row + posTypeRowNum[i],
	                            	col: col + posTypeColNum[i],
	                            	type: engineAttr[posType[i]],
	                            	direction: posTypeDirection[i]
	                            });	
	                        }
                        }
                    }
                }
            }
            match(complete, needTile, energy);
            solve = connect(complete, needTile, energy, result);
		    console.log("최종 result", solve.length);
			for (var i = 0; i < energy.length; i++) {
				row = energy[i].row;
				col = energy[i].col;
                color = energy[i].type;
                if (energy[i].direction === 0) directionLetter = "↑";
                else if (energy[i].direction === 1) directionLetter = "→";
                else if (energy[i].direction === 2) directionLetter = "↓";
                else if (energy[i].direction === 3) directionLetter = "←";
                else {
                	energy[i].direction = "";
                	directionLetter = "";
                }
                $(".board #td_" + row + "_" + col).addClass(color).append("<p>" + directionLetter + "</p>");
			}
			console.log("complete", complete);
            console.log("energy", energy);
            console.log("needTile", needTile);
            function relocate() {
            	var relocateTile = [];
            	var recallTile = [];
            	if ($(".saved").length > 0) {
					for (var i = 0; i < $(".saved").length; i++) {
						if ($(".saved").eq(i).attr("id") !== $(".saved").eq(i).attr("class").split("pos_")[1].split(" rotate_")[0]) {
							$(".saved").eq(i).addClass("relocate");
							if ($(".saved").eq(i).attr("id") === "") {
								if ($(".saved").eq(i).attr("alt") === "tile_energy_red" || $(".saved").eq(i).attr("alt") === "tile_energy_orange" || $(".saved").eq(i).attr("alt") === "tile_energy_green" || $(".saved").eq(i).attr("alt") === "tile_energy_blue" || $(".saved").eq(i).attr("alt") === "tile_white" || $(".saved").eq(i).attr("alt") === "tile_option") {
									recallTile.push({name: $(".saved").eq(i).attr("alt")});
								}
							}
							scoreTile.push({
								row: parseInt($(".saved").eq(i).attr("id").split("_")[0]),
								col: parseInt($(".saved").eq(i).attr("id").split("_")[1]),
								name: $(".saved").eq(i).attr("alt"),
								rotate: parseInt($(".saved").eq(i).attr("class").split("rotate_")[1].split(" relocate")[0])
							});
						}
					}
					return recallTile;
				}
            }
            var recallTile = relocate();
            console.log("recallTile", recallTile);
            var needTileMod = needTile;
			for (var i = 0; i < needTileMod.length; i++) {
				for (var j = 0; j < solve.length; j++) {
					if (needTileMod[i] !== undefined) {
						if (solve[j].row === needTileMod[i].row && solve[j].col === needTileMod[i].col) {
							needTileMod = $.grep(needTileMod, function(value) {
								return value != needTileMod[i];
							});
						}	
					}
					
				}
			}
			console.log("needTileMod", needTileMod);
			function overlapCount() {
				var value = 0;
				var disable = [];
				for (var j = 0; j < $(".wrap_tile li").length; j++) {
					if($(".wrap_tile li")[j].className !== "") {
						disable.push($(".wrap_tile li")[j].className);
					}
					for (var k = 0; k < disable.length; k++) {
						if (disable[k] === disable[k + 1]) {
							value += 1;
						}
					}
					for (var i = 0; i < complete.length; i++) {
						if (complete[i].row === parseInt($(".wrap_tile li")[j].className.split("_")[1]) && complete[i].col === parseInt($(".wrap_tile li")[j].className.split("_")[2])) {
							value += 1;
						}
					}
				}
				for (var i = 0; i < complete.length; i++) {
					for (var j = 0; j < i; j++) {
						if (complete[i].row === complete[j].row && complete[i].col === complete[j].col) {
							value += 1;
						}
					}
				}
				return value;
			}
			var overlap = overlapCount();
			console.log("overlap", overlap);
			if (solve.length === needTile.length && solve.length !== 0 && overlap === 0) {
				success = "성공";
				console.log("성공");
				function bonusScore() {
					var solve_bonus = [];
					var bonus_score = 0;
					for (var i = 0; i < solve.length; i++) {
						if (solve[i].bonus > 0) {
							$("#td_" + solve[i].row + "_" + solve[i].col).append("<span class='score score_" + solve[i].bonus + "'></span>");
							solve_bonus.push(solve[i]);
							bonus_score = bonus_score + solve[i].bonus;
						}
					}
					return bonus_score;
				}
				var bonus_score = bonusScore();
				var score_engine;
				for (var i = 0; i < complete.length; i++) {
					if (complete[i].new === "yes") {
						scoreTile.push({
	                    	row: complete[i].row,
	                    	col: complete[i].col,
	                    	name: complete[i].name,
	                    	rotate: complete[i].rotate
	                    });
	                    if (complete[i].name.split("tile_engine_")[1]) {
		                	score_engine = tile_engine[complete[i].name.split("tile_engine_")[1]].score;
		                }
					}
				}
				for (var i = 0; i < scoreTile.length; i++) {
					if (isNaN(scoreTile[i].row)) {
						scoreTile = $.grep(scoreTile, function(value) {
							return value != scoreTile[i];
						});
					}
				}
				
				console.log("scoreTile", scoreTile);
				var double_cost = 0;
				for (var i = 0; i < scoreTile.length; i++) {
					if (scoreTile[i].name === "tile_way_5" || scoreTile[i].name === "tile_way_6" || scoreTile[i].name === "tile_option") {
						double_cost += double_cost - 1;
					}
				}
				var tile_cost = scoreTile.length - double_cost - 1;
				if (score_engine === undefined) {
					$(".board h3 span").text("새 기계를 설치하세요.");
					$(".board td p, td .score").remove();
					return [success, score, complete, bonus_score];
					// return success = "실패";
				} else {
					$(".board h3 span").text("획득 가능 점수 : " + parseInt(score_engine - tile_cost) + "점 (타일 비용 : " + tile_cost + ")");
					// var score = 0;
					var score = score_engine - tile_cost;
				}
				return [success, score, complete, bonus_score, recallTile, scoreTile];
			} else {
				success = "실패";
				$(".board h3 span").text("연결을 확인하세요.");
				return success;
			}
		}
		$(".give_up").click(function (e) {
			e.preventDefault();
			var result = checkTile();
			var complete = result[2];
			var bonus = result[3];
			$(".board h3 span").text("");
			if (<%= room.round %> === 1) {
				$(".board h3 span").text("다 포기하지마~~~~~");
				return;
			} else {
				$.post("/ajaxGiveUp?roomId=<%= room._id %>", { "bonus": bonus }, function(data) {
					if (data.result === "성공") {
						location.reload();
					}
				}, "json");	
			}
		});
		$("body").keydown(function (e) {
			if (e.keyCode == 13) {
				$(".wrap_tile span").remove();
				$(".board td p").remove();
				checkTile();
			}
		});
		$(".complete").click(function(e) {
			e.preventDefault();
			var result = checkTile();
			var success = result[0];
			var score = result[1];
			var complete = result[2];
			var bonus = result[3];
			var recallTile = result[4];
			var scoreTile = result[5]
			if (success === "성공") {
				console.log("성공");
				$.post("/ajaxSaveTile?roomId=<%= room._id %>", { "score": score, "bonus": bonus, "complete": complete, "recallTile": recallTile, "scoreTile": scoreTile },function(data) {
					if (data.result === "성공") {
						alert("배치 완료! " + score + "점 획득");
						location.reload();
					}
				}, "json");
			}
		});

		$(".mask").attr("style", "height:" + $("html").prop("scrollHeight") + "px");
	});
</script>
<% include include/footer.ejs %>